#include "channel.h"
#include "linked_list.h"
#include <pthread.h>

// Creates a new channel with the provided size and returns it to the caller
channel_t* channel_create(size_t size) {
  if(size == 0) return NULL;
  
  channel_t* channel = (channel_t*) malloc(sizeof(channel_t));
  channel->buffer = buffer_create(size);
  channel->is_closed = false;
  channel->semaphores = list_create(NULL);

  pthread_mutex_init(&channel->mutex, NULL);
  pthread_cond_init(&channel->channel_no_longer_full, NULL);
  pthread_cond_init(&channel->channel_no_longer_empty, NULL);
  
  return channel;
}

void signal_semaphore(channel_t* channel) {
  list_node_t* node = channel->semaphores->head;
  
  while(node != NULL) {
    sem_post(node->data);
    node = node->next;
  }
}

void remove_semaphore(select_t* channel_list, size_t channel_count, void* semaphore) {
  for(size_t j = 0; j < channel_count; j++) {
    printf(" e:%ld\n", j);
    select_t* select = channel_list + j;
    printf("f\n");
    channel_t* channel = select->channel;
    printf("g\n");
    pthread_mutex_lock(&channel->mutex);
    printf("elvcns\n");
    list_node_t* node = list_find(channel->semaphores, semaphore);
    printf("h: %p\n", semaphore);
    list_remove(channel->semaphores, node);
    pthread_mutex_unlock(&channel->mutex);
    printf("i\n");
  }
  printf("end\n");
}

// Writes data to the given channel
enum channel_status channel_send(channel_t *channel, void* data) {
  if(channel->is_closed) return CLOSED_ERROR;
  
  pthread_mutex_lock(&channel->mutex);
  
  while(buffer_current_size(channel->buffer) >= buffer_capacity(channel->buffer)) {
    if(channel->is_closed) {
      pthread_mutex_unlock(&channel->mutex);
      return CLOSED_ERROR;
    } 
    pthread_cond_wait(&channel->channel_no_longer_full, &channel->mutex);
  }
  buffer_add(channel->buffer, data);
  pthread_cond_signal(&channel->channel_no_longer_empty);
  
  signal_semaphore(channel);
  pthread_mutex_unlock(&channel->mutex);
  return SUCCESS;
}

// Reads data from the given channel
enum channel_status channel_receive(channel_t* channel, void** data) {
  if(channel->is_closed) return CLOSED_ERROR;

  pthread_mutex_lock(&channel->mutex);

  while(buffer_current_size(channel->buffer) <= 0) {
    if(channel->is_closed) {
      pthread_mutex_unlock(&channel->mutex);
      return CLOSED_ERROR;
    }
    
    pthread_cond_wait(&channel->channel_no_longer_empty, &channel->mutex);
  }

  buffer_remove(channel->buffer, data);
  pthread_cond_signal(&channel->channel_no_longer_full);

  signal_semaphore(channel);  
  pthread_mutex_unlock(&channel->mutex);

  return SUCCESS;
}

// Writes data to the channel non-blockingly
enum channel_status channel_non_blocking_send(channel_t* channel, void* data) {
  if(channel == NULL) return GENERIC_ERROR;
  if(channel->is_closed) return CLOSED_ERROR;

  pthread_mutex_lock(&channel->mutex);
  
  if(buffer_current_size(channel->buffer) >= buffer_capacity(channel->buffer)) {
    pthread_mutex_unlock(&channel->mutex);
    return CHANNEL_FULL;
  }
  buffer_add(channel->buffer, data);
  pthread_cond_signal(&channel->channel_no_longer_empty);

  signal_semaphore(channel);
  pthread_mutex_unlock(&channel->mutex);
  
  return SUCCESS;     
}

// Reads data from the channel non-blockingly
enum channel_status channel_non_blocking_receive(channel_t* channel, void** data) {
  pthread_mutex_lock(&channel->mutex);
  
  if(channel->is_closed) {
    pthread_mutex_unlock(&channel->mutex);
    return CLOSED_ERROR;
  }
  if(buffer_current_size(channel->buffer) == 0) { 
    pthread_mutex_unlock(&channel->mutex);
    return CHANNEL_EMPTY;
  }

  buffer_remove(channel->buffer, data);
  pthread_cond_signal(&channel->channel_no_longer_full);

  signal_semaphore(channel);
  pthread_mutex_unlock(&channel->mutex);

  return SUCCESS;
}

// Closes the channel
enum channel_status channel_close(channel_t* channel) {
  pthread_mutex_lock(&channel->mutex);
 
  if(channel->is_closed) {
    pthread_mutex_unlock(&channel->mutex);
    return CLOSED_ERROR;
  }
  
  channel->is_closed = true;
  pthread_cond_broadcast(&channel->channel_no_longer_empty);
  pthread_cond_broadcast(&channel->channel_no_longer_full);
  signal_semaphore(channel);
  pthread_mutex_unlock(&channel->mutex);
  return SUCCESS;
}

// Destroys the channel
enum channel_status channel_destroy(channel_t* channel) {
  pthread_mutex_lock(&channel->mutex);
  if(channel->is_closed) {
    buffer_free(channel->buffer);
    list_destroy(channel->semaphores);
    pthread_mutex_unlock(&channel->mutex);
    pthread_mutex_destroy(&channel->mutex);
    pthread_cond_destroy(&channel->channel_no_longer_empty);
    pthread_cond_destroy(&channel->channel_no_longer_full);
    
    free(channel);
    return SUCCESS;
  }
  pthread_mutex_unlock(&channel->mutex);
  return DESTROY_ERROR;
}

// Selects a channel for send or receive operation
enum channel_status channel_select(select_t* channel_list, size_t channel_count, size_t* selected_index) {
  *selected_index = 0;

  sem_t semaphore;
  sem_init(&semaphore, 0, 0);
  for(size_t i = 0; i < channel_count; i++) {
    select_t* select = channel_list + i;
    channel_t* channel = select->channel;
    
    pthread_mutex_lock(&channel->mutex);
    list_insert(channel->semaphores, &semaphore);
    pthread_mutex_unlock(&channel->mutex);
  }
    
  while(true) {
    for(size_t i = 0; i < channel_count; i++) {
      select_t* select = channel_list + i;
      channel_t* channel = select->channel;
      
      if(select->dir == RECV) {
        enum channel_status status = channel_non_blocking_receive(channel, &select->data);
        
        if(status != CHANNEL_EMPTY) {
          *selected_index = i;
          remove_semaphore(channel_list, channel_count, (void*)(&semaphore));
          sem_destroy(&semaphore);
          return status;
        }
      }
      else if(select->dir == SEND) {
        enum channel_status status = channel_non_blocking_send(channel, select->data);
        if(status != CHANNEL_FULL) {
          *selected_index = i;
          remove_semaphore(channel_list, channel_count, (void*)(&semaphore));
          sem_destroy(&semaphore);
          
          return status;
        }
      }
      else {
        return GENERIC_ERROR;
      }
    }
    sem_wait(&semaphore);
  }
}
